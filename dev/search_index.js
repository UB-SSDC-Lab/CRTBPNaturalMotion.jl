var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = CRTBPNaturalMotion","category":"page"},{"location":"#CRTBPNaturalMotion","page":"Home","title":"CRTBPNaturalMotion","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for CRTBPNaturalMotion.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [CRTBPNaturalMotion]","category":"page"},{"location":"#CRTBPNaturalMotion.AbstractIndependantVariable","page":"Home","title":"CRTBPNaturalMotion.AbstractIndependantVariable","text":"AbstractIndependantVariable\n\nAn abstract type to encompas all supported independant variables.\n\n\n\n\n\n","category":"type"},{"location":"#CRTBPNaturalMotion.ArcLength","page":"Home","title":"CRTBPNaturalMotion.ArcLength","text":"ArcLength\n\nA concrete type to represent arc-length as the independant variable.\n\n\n\n\n\n","category":"type"},{"location":"#CRTBPNaturalMotion.Time","page":"Home","title":"CRTBPNaturalMotion.Time","text":"Time\n\nA concrete type to represent time as the independant variable.\n\n\n\n\n\n","category":"type"},{"location":"#CRTBPNaturalMotion.get_state_and_stm-Union{Tuple{StaticArraysCore.SMatrix{6, 7, T, 42}}, Tuple{T}} where T","page":"Home","title":"CRTBPNaturalMotion.get_state_and_stm","text":"get_state_and_stm(z::SMatrix{6,7,T,42}) where T\n\nGet the state and state transition matrix (STM) from the full integration matrix.\n\nArguments\n\nz::SMatrix{6,7,T,42}: Matrix with first column as the state and the remaining 6 x 6 as   the STM.\n\nReturns\n\nTuple{SVector{6,T},SMatrix{6,6,T,36}: The state vector and the state transition matrix   in a return tuple.\n\n\n\n\n\n","category":"method"},{"location":"#CRTBPNaturalMotion.get_stm-Union{Tuple{StaticArraysCore.SMatrix{6, 7, T, 42}}, Tuple{T}} where T","page":"Home","title":"CRTBPNaturalMotion.get_stm","text":"get_stm(z::SMatrix{6,7,T,42}) where T\n\nGet the state transition matrix (STM) from the full integration matrix.\n\nArguments\n\nz::SMatrix{6,7,T,42}: Matrix with first column as the state and the remaining 6 x 6 as   the STM.\n\nReturns\n\nSMatrix{6,6,T,36}: The state transition matrix.\n\n\n\n\n\n","category":"method"},{"location":"#CRTBPNaturalMotion.initial_state_with_stm-Union{Tuple{StaticArraysCore.SVector{6, T}}, Tuple{T}} where T","page":"Home","title":"CRTBPNaturalMotion.initial_state_with_stm","text":"initial_state_with_stm(x0::SVector{6,T}) where T\n\nCreate the initial state with the state transition matrix (STM).\n\nArguments\n\nx0::SVector{6,T}: Initial state vector.\n\nReturns\n\nSMatrix{6,7,T,42}: Matrix with first column as the state and the remaining 6 x 6 as   the STM initial condition (i.e., [x0, I]).\n\n\n\n\n\n","category":"method"},{"location":"#CRTBPNaturalMotion.natural_crtbp_and_time_eom_with_independant_arclen-Tuple{Any, Any, Any}","page":"Home","title":"CRTBPNaturalMotion.natural_crtbp_and_time_eom_with_independant_arclen","text":"natural_crtbp_and_time_eom_with_independant_arclen(x, p, t)\n\nCompute the equations of motion for the CRTBP model with an extra state  for the time with only natural motion. Here the independant variable has been  transformed from time to arc-length.\n\nArguments\n\nx::SVector{7}: State vector, i.e., [position^T; velocity^T].\np::Tuple{Float64,}: Tuple of parameters, (mu,)\nt::Float64: Time.\n\n\n\n\n\n","category":"method"},{"location":"#CRTBPNaturalMotion.natural_crtbp_eom-Tuple{Any, Any, Any}","page":"Home","title":"CRTBPNaturalMotion.natural_crtbp_eom","text":"natural_crtbp_eom(x, p, t)\n\nCompute the equations of motion for the CRTBP model with only natural motion.\n\nArguments\n\nx::SVector{6}: State vector, i.e., [position^T; velocity^T].\np::Tuple{Float64,Float64,Float64}: Tuple of parameters, (mu,)\nt::Float64: Time.\n\n\n\n\n\n","category":"method"},{"location":"#CRTBPNaturalMotion.natural_crtbp_eom_with_arclen-Tuple{Any, Any, Any}","page":"Home","title":"CRTBPNaturalMotion.natural_crtbp_eom_with_arclen","text":"natural_crtbp_eom_with_arclen(x, p, t)\n\nCompute the equations of motion for the CRTBP model with only natural motion,  employing the arclength along the trajectory as an additional state.\n\nArguments\n\nx::SVector{7}: State vector, i.e., [position^T; velocity^T; arc-len].\np::Tuple{Float64,}: Tuple of parameters, (mu,)\nt::Float64: Time.\n\n\n\n\n\n","category":"method"},{"location":"#CRTBPNaturalMotion.natural_crtbp_eom_with_independant_arclen-Tuple{Any, Any, Any}","page":"Home","title":"CRTBPNaturalMotion.natural_crtbp_eom_with_independant_arclen","text":"natural_crtbp_eom_with_independant_arclen(x, p, t)\n\nCompute the equations of motion for the CRTBP model with only natural motion where the independant variable has been transformed from time to arc-length.\n\nArguments\n\nx::SVector{7}: State vector, i.e., [position^T; velocity^T].\np::Tuple{Float64,}: Tuple of parameters, (mu,)\nt::Float64: Time.\n\n\n\n\n\n","category":"method"},{"location":"#CRTBPNaturalMotion.natural_crtbp_eom_with_stm-Tuple{Any, Any, Any}","page":"Home","title":"CRTBPNaturalMotion.natural_crtbp_eom_with_stm","text":"natural_crtbp_eom_with_stm(x, p, t)\n\nCompute the equations of motion for the CRTBP model with the state transition matrix.\n\nArguments\n\nx::SMatrix{6,7,Float64}: Matrix with first column ast the state and the remaining 6 x 6 as the STM.\np::Tuple{Float64,}: Tuple of parameters, (mu,)\nt::Float64: Time.\n\n\n\n\n\n","category":"method"},{"location":"#CRTBPNaturalMotion.propagate_return_all_states-Union{Tuple{TT}, Tuple{TX}, Tuple{StaticArraysCore.SVector{6, TX}, Tuple{TT, TT}, Any, Function, Type{Time}}} where {TX, TT}","page":"Home","title":"CRTBPNaturalMotion.propagate_return_all_states","text":"propagate_return_all_states(\n    x0::SVector{6,TX},\n    tspan::Tuple{TT,TT},\n    mu,\n    term_cond::Function,\n    iv::Type{AbstractIndependantVariable};\n    solver = Vern9(),\n    reltol = 1e-14,\n    abstol = 1e-14,\n) where {TX,TT}\n\nPropagate the state x0 over the time span tspan and return the full ODE solution. At the first point at which term_cond is zero (if any), the integration will terminate. The final argument can be specified to set the desired independant variable (i.e., Time or ArcLength).\n\nArguments\n\nx0::SVector{6,TX}: The initial state with x0 = [r0; v0].\ntspan::Tuple{TT,TT}: The span of the independant variable forwhich to solve the ODE.\nmu::Real: The mass parameter of the three-body system (mu = m2 / (m1 + m2)).\nterm_cond::Function: The DifferentialEquations.jl continuous callback condition function   that will terminate the integration when it is zero. Function should be of the form   term_cond(x,t,integ), where x is the state, t is the independant variable, and   integ is the integrator struct (see DifferentialEquations.jl callback documentation).\niv::Type{AbstractIndependantVariable}: The desired independant variable (Time if   unspecified).\n\nKeywords\n\nsolver::OrdinaryDiffEq.AbstractODESolver: The solver to use for the integration.\nreltol: The relative tolerance for the solver.\nabstol: The absolute tolerance for the solver.\n\nReturns\n\nODESolution: The full solution to the ODE problem.\n\n\n\n\n\n","category":"method"},{"location":"#CRTBPNaturalMotion.propagate_return_all_states-Union{Tuple{TT}, Tuple{TX}, Tuple{StaticArraysCore.SVector{6, TX}, Tuple{TT, TT}, Any, Type{Time}}} where {TX, TT}","page":"Home","title":"CRTBPNaturalMotion.propagate_return_all_states","text":"propagate_return_all_states(\n    x0::SVector{6,TX}, tspan::Tuple{TT,TT}, mu [, iv::Type{AbstractIndependantVariable}];\n    solver = Vern9(),\n    reltol = 1e-14,\n    abstol = 1e-14,\n) where {TX,TT}\n\nPropagate the state x0 over the time span tspan and return the full ODE solution. The final argument can be specified to set the desired independant variable (i.e., Time or ArcLength).\n\nArguments\n\nx0::SVector{6,T}: The initial state with x0 = [r0; v0].\ntspan::Tuple{T,T}: The span of the independant variable forwhich to solve the ODE.\nmu::Real: The mass parameter of the three-body system (mu = m2 / (m1 + m2)).\niv::Type{AbstractIndependantVariable}: The desired independant variable (Time if   unspecified).\n\nKeywords\n\nsolver::OrdinaryDiffEq.AbstractODESolver: The solver to use for the integration.\nreltol: The relative tolerance for the solver.\nabstol: The absolute tolerance for the solver.\n\nReturns\n\nODESolution: The full solution to the ODE problem.\n\n\n\n\n\n","category":"method"},{"location":"#CRTBPNaturalMotion.propagate_return_all_states-Union{Tuple{TX}, Tuple{StaticArraysCore.SVector{6, TX}, AbstractVector, Any, Type{Time}}} where TX","page":"Home","title":"CRTBPNaturalMotion.propagate_return_all_states","text":"propagate_return_all_states(\n    x0::SVector{6,TX},\n    tsteps::Union{StepRangeLen,AbstractVector},\n    mu,\n    iv::Type{AbstractIndependantVariable};\n    solver = Vern9(),\n    reltol = 1e-14,\n    abstol = 1e-14,\n) where TX\n\nPropagate the state x0 from tsteps[1] to tsteps[end], returning the solution at each time in tsteps. The final argument can be specified to set the desired independant variable (i.e., Time or ArcLength).\n\nArguments\n\nx0::SVector{6,TX}: The initial state with x0 = [r0; v0].\ntsteps::Union{StepRangeLen,AbstractVector}: The time steps at which a state x(t) is desired.\nmu::Real: The mass parameter of the three-body system (mu = m2 / (m1 + m2)).\niv::Type{AbstractIndependantVariable}: The desired independant variable.\n\nKeywords\n\nsolver::OrdinaryDiffEq.AbstractODESolver: The solver to use for the integration.\nreltol: The relative tolerance for the solver.\nabstol: The absolute tolerance for the solver.\n\nReturns\n\nVector{SVector{6,TX}}: A vector of states at each time in tsteps.\n\n\n\n\n\n","category":"method"},{"location":"#CRTBPNaturalMotion.propagate_return_arc_length-Union{Tuple{TT}, Tuple{TX}, Tuple{StaticArraysCore.SVector{6, TX}, Tuple{TT, TT}, Any}} where {TX, TT}","page":"Home","title":"CRTBPNaturalMotion.propagate_return_arc_length","text":"propagate_return_arc_length(\n    x0::SVector{6,TX}, tspan::Tuple{TT,TT}, mu;\n    solver = Vern9(),\n    reltol = 1e-14,\n    abstol = 1e-14,\n) where {TX,TT}\n\nPropagate the state x0 over the time span tspan and return the arclength along the trajectory. The final argument can be specified to set the desired independant variable (i.e., Time or ArcLength).\n\narguments\n\nx0::SVector{6,TX}: the initial state with x0 = [r0; v0].\ntspan::Tuple{TT,TT}: the time span forwhich to solve the ode.\nmu::Real: the mass parameter of the three-body system (mu = m2 / (m1 + m2)).\n\nkeywords\n\nsolver::OrdinaryDiffEq.AbstractODESolver: The solver to use for the integration.\nreltol: The relative tolerance for the solver.\nabstol: The absolute tolerance for the solver.\n\nreturns\n\nTX: The arc-length along the curve\n\n\n\n\n\n","category":"method"},{"location":"#CRTBPNaturalMotion.propagate_return_final_state-Union{Tuple{TT}, Tuple{TX}, Tuple{StaticArraysCore.SVector{6, TX}, Tuple{TT, TT}, Any, Function, Type{Time}}} where {TX, TT}","page":"Home","title":"CRTBPNaturalMotion.propagate_return_final_state","text":"propagate_return_final_state(\n    x0::SVector{6,TX},\n    tspan::Tuple{TT,TT},\n    mu,\n    term_cond::Function [, iv::Type{AbstractIndependantVariable}];\n    solver = Vern9(),\n    reltol = 1e-14,\n    abstol = 1e-14,\n) where {TX,TT}\n\nPropagate the state x0 over the time span tspan and return the final state. At the first point at which term_cond is zero (if any), the integration will terminate. The final argument can be specified to set the desired independant variable (i.e., Time or ArcLength).\n\nArguments\n\nx0::SVector{6,TX}: The initial state with x0 = [r0; v0].\ntspan::Tuple{TT,TT}: The span of the independant variable forwhich to solve the ODE.\nmu::Real: The mass parameter of the three-body system (mu = m2 / (m1 + m2)).\nterm_cond::Function: The DifferentialEquations.jl continuous callback condition function   that will terminate the integration when it is zero. Function should be of the form   term_cond(x,t,integ), where x is the state, t is the independant variable, and   integ is the integrator struct (see DifferentialEquations.jl callback documentation).\niv::Type{AbstractIndependantVariable}: The desired independant variable (Time if   unspecified).\n\nKeywords\n\nsolver::OrdinaryDiffEq.AbstractODESolver: The solver to use for the integration.\nreltol: The relative tolerance for the solver.\nabstol: The absolute tolerance for the solver.\n\nReturns\n\nSVector{6,TX}: The final state of the ODE solution.\n\n\n\n\n\n","category":"method"},{"location":"#CRTBPNaturalMotion.propagate_return_final_state-Union{Tuple{TT}, Tuple{TX}, Tuple{StaticArraysCore.SVector{6, TX}, Tuple{TT, TT}, Any, Type{Time}}} where {TX, TT}","page":"Home","title":"CRTBPNaturalMotion.propagate_return_final_state","text":"propagate_return_final_state(\n    x0::SVector{6,TX}, tspan::Tuple{TT,TT}, mu [, iv::Type{AbstractIndependantVariable}];\n    solver = Vern9(),\n    reltol = 1e-14,\n    abstol = 1e-14,\n) where {TX,TT}\n\nPropagate the state x0 over the time span tspan and return the final state. The final argument can be specified to set the desired independant variable (i.e., Time or ArcLength).\n\narguments\n\nx0::SVector{6,TX}: The initial state with x0 = [r0; v0].\ntspan::Tuple{TT,TT}: The span of the independant variable forwhich to solve the ode.\nmu::Real: The mass parameter of the three-body system (mu = m2 / (m1 + m2)).\niv::Type{AbstractIndependantVariable}: The desired independant variable (Time if   unspecified).\n\nkeywords\n\nsolver::OrdinaryDiffEq.AbstractODESolver: The solver to use for the integration.\nreltol: The relative tolerance for the solver.\nabstol: The absolute tolerance for the solver.\n\nreturns\n\nSVector{6,TX}: The final state of the ode solution.\n\n\n\n\n\n","category":"method"},{"location":"#CRTBPNaturalMotion.propagate_return_final_stm-Union{Tuple{TT}, Tuple{TX}, Tuple{StaticArraysCore.SVector{6, TX}, Tuple{TT, TT}, Any}} where {TX, TT}","page":"Home","title":"CRTBPNaturalMotion.propagate_return_final_stm","text":"propagate_return_final_stm(\n    x0::SVector{6,TX}, tspan::Tuple{TT,TT}, mu;\n    solver = Vern9(),\n    reltol = 1e-14,\n    abstol = 1e-14,\n) where {TX,TT}\n\nPropagate the state x0 over the time span tspan and return the final state transition matrix (STM).\n\narguments\n\nx0::SVector{6,TX}: The initial state with x0 = [r0; v0].\ntspan::Tuple{TT,TT}: The span of the independant variable forwhich to solve the ode.\nmu::Real: The mass parameter of the three-body system (mu = m2 / (m1 + m2)).\n\nkeywords\n\nsolver::OrdinaryDiffEq.AbstractODESolver: The solver to use for the integration.\nreltol: The relative tolerance for the solver.\nabstol: The absolute tolerance for the solver.\n\nreturns\n\nSMatrix{6,6,TX,36}: The stm for the full trajectory\n\n\n\n\n\n","category":"method"},{"location":"#CRTBPNaturalMotion.propagate_return_time-Union{Tuple{TT}, Tuple{TX}, Tuple{StaticArraysCore.SVector{6, TX}, Tuple{TT, TT}, Any}} where {TX, TT}","page":"Home","title":"CRTBPNaturalMotion.propagate_return_time","text":"propagate_return_time(\n    x0::SVector{6,TX}, sspan::Tuple{TT,TT}, mu;\n    solver = Vern9(),\n    reltol = 1e-14,\n    abstol = 1e-14,\n) where {TX,TT}\n\nPropagate the state x0 over the arc-length span sspan and return the arclength along the trajectory. The final argument can be specified to set the desired independant variable (i.e., Time or ArcLength).\n\narguments\n\nx0::SVector{6,TX}: the initial state with x0 = [r0; v0].\nsspan::Tuple{TT,TT}: the arc-length span forwhich to solve the ode.\nmu::Real: the mass parameter of the three-body system (mu = m2 / (m1 + m2)).\n\nkeywords\n\nsolver::OrdinaryDiffEq.AbstractODESolver: The solver to use for the integration.\nreltol: The relative tolerance for the solver.\nabstol: The absolute tolerance for the solver.\n\nreturns\n\nTX: The time along the curve\n\n\n\n\n\n","category":"method"}]
}
